name: run-selenium-job

on:
  repository_dispatch:
    types: [run-selenium-job]

jobs:
  build:
    env:
      MESSAGE_FROM_SQS: ${{ github.event.client_payload.message }}
      PY_COLORS: "1"
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        run_id: [1]
        os: [ubuntu-latest]
        python-version: ["3.11"]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      # - name: Print Message
      #   run: |
      #     echo "ðŸ“¨ Message from SQS: ${{ env.MESSAGE_FROM_SQS }}"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade pip
          pip install --upgrade wheel
          pip install -r requirements.txt
          pip install --upgrade pyautogui

      - name: Check the console scripts interface (methods)
        run: |
          seleniumbase methods
          sbase methods

      - name: Check the console scripts interface
        run: |
          seleniumbase
          sbase
      - name: Get current path
        run : |
          pwd
      - name: Install chromedriver and edgedriver
        run: |
          seleniumbase install chromedriver
          seleniumbase install edgedriver

      - name: Make sure pytest is working
        run: |
          echo "def test_1(): pass" > nothing.py
          pytest nothing.py

      - name: Get CPU count
        run: |
          echo "import os; print(os.cpu_count())" > get_cpu_count.py
          python get_cpu_count.py

      # - name: Copy resume files
      #   run: |
      #     sudo mkdir -p $HOME/app
      #     echo $HOME
      #     sudo cp resume.pdf $HOME/app/resume.pdf

      - name: Run seleniumbase script - Run #${{ matrix.run_id }}
        run: |
          echo "Running instance #${{ matrix.run_id }}"
          python lever_new.py --headless

      - name: Upload screenshots as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-run-${{ matrix.run_id }}
          path: |
            abc*.png
